"""
Django settings for dbs_test project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-byz5$&8lsm#1wiaxy)oha%%j5y7-xyx^r3+o6u%edi2n_q(qh2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    #'debug_toolbar',
    'app1',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
]

MIDDLEWARE = [
    #'app1.middleware.custom_debug.Custom_DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dbs_test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dbs_test.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(threadName)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'indented': {  # additional space in first ('  ')
            'format': '  [%(asctime)s] %(levelname)s [%(threadName)s] %(message)s',  # [%(name)s:%(lineno)s]
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'card_separation': {
            'format': '%(message)s',
        },
        'simple': {
            'format': '%(levelname)s %(message)s',
        },
    },
    'handlers': {
        # Handler for Django/system logs
        'django_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # Handler for web logs (you decide when to log)
        'web_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'web.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'web_file_separation': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'web.log'),
            'formatter': 'card_separation',
            'encoding': 'utf-8',
        },
        'file_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'web.log'),
            'formatter': 'indented',
            'encoding': 'utf-8',
        },
        'driver_handler': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'driver.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'INFO',
        },
        'console_file': {
            'class': 'logging.StreamHandler',
            'formatter': 'indented',
            'level': 'INFO',
        },
    },
    'loggers': {
        # Logger for Django/system logs (internal and framework-level)
        'django': {
            'handlers': ['django_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Logger for web logging: use this when you explicitly call logging.getLogger('web')
        'web': {
            'handlers': ['web_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'web_separation': {   # show separation of cards (like "----------') without any prestring
            'handlers': ['web_file_separation', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'file': {     # show logs when crawl inside a file (shows with additional '  ' space)
            'handlers': ['file_file', 'console_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'driver': {  # show logs only for driver controlling (unctrolable in multi thread logs)
            'handlers': ['driver_handler', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'akh_db',
        'USER': 'postgres',
        'PASSWORD': 'a13431343',
        'HOST': 'localhost',
        'PORT': '5431',
        'CONN_MAX_AGE': 600,  # Connection pooling
        'OPTIONS': {
            'connect_timeout': 10,
        }
    }
}
# MongoDB Configuration
MONGODB = {
    'HOST': 'localhost',        # MongoDB host
    'PORT': 27016,             # MongoDB port
    'NAME': 'test_db',    # MongoDB database name
    #'USER': 'mongo_user',      # Optional: MongoDB username
    #'PASSWORD': 'mongo_pass',  # Optional: MongoDB password
}

# Elasticsearch Configuration
ELASTICSEARCH = {
    'HOST': 'localhost',           # Elasticsearch host
    'PORT': 9200,                 # Elasticsearch port
    'INDEX_NAME': 'products',     # Elasticsearch index name
    #'USER': 'elastic_user',       # Optional: Elasticsearch username
    #'PASSWORD': 'elastic_pass',   # Optional: Elasticsearch password
    'USE_SSL': False,             # Optional: Use HTTPS
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
    }
}

STATIC_URL = '/static/'
STATIC_ROOT = [BASE_DIR / "static"]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# after change restart manually!
OPERATIONS_COUNT = {'write': 1000, 'read': 100, 'aggregate': 1000, 'full_text_search_complex': 1000}   # do it in all dbs. example: do read for 100 records
DATABASES_TO_TEST = {'Elastic': 'ElasticBenchmarkStrategy', 'Mongo': 'MongoBenchmarkStrategy', 'Postgres': 'PostgresBenchmarkStrategy'}
REFRESH = False          # clear database after each test or not
